class Lista{
  
  public:
    Lista();
    Lista(const Lista&);
    ~Lista();
    void inserisci_in_testa(int);
    int elimina_in_coda();
  private:
    struct elem{
      int value;
      elem *next;
      elem *prev;
      }
    elem *first;
    elem *last;
    int num_elementi;
};
  
Lista::Lista(){
  first = NULL;
  last = NULL;
  num_elementi = 0;
}

Lista::Lista(const Lista& l){
  
  if(l.first == NULL){
    first = NULL;
    last = NULL;
    num_elementi = 0;
    return;
  }
  
  elem *current_elem = new elem;
  current_elem->value = l.first->value;
  current_elem->next = NULL;
  current_elem->prev = NULL;
  first = current_elem;
  
  for(elem *e = l.first->next; e != NULL; e = e->next){
    elem *newe = new elem;
    newe->value = e->value;
    newe->next = NULL;
    newe->prev = current_elem;
    current_elem->next = newe;
    current_elem = newe;
  }
  
  last = current_element;
  num_elementi = l.num_elementi;
  
}

Lista::~Lista(){
  elem *e = first;
  elem *tmp;
  while(e != NULL){
    tmp = e->next;
    delete e;
    e = tmp;
  }
}

void Lista::inserisci_in_testa(int v){
  elem *e = new elem;
  e->value = v;
  e->next = first;
  e->prev = NULL;
  first = e;
  num_elementi++;
}
  
int Lista::elimina_in_coda(){
  elem *tmp = last;
  last = last->prev;
  last->next = NULL;
  int result = tmp->value;
  delete tmp;
  num_elementi--;
  return result;
}

int Lista::getSize(){
  return num_elementi;
}

